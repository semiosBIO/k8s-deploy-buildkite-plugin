#!/bin/bash

function updateImage () {
    local i=0
    local deployment_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_NAME"
    local deployment_label_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_LABEL"
    local current_revisions=()
    local deploy_pids=()
    local cron_pids=()
    local exit_codes=()
    local should_rollback=0
    local deployment_names=()

    # Start deploys in parallel

    while [[ -n "${!deployment_name_envvar:-}" ]] ; do
        local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_NAMESPACE"

        local deployment_name="${!deployment_name_envvar}"
        local namespace="${!namespace_envvar}"

        deployment_names+=($deployment_name)
        current_revisions+=(`kubectl get deployment/$deployment_name -n $namespace -o json | jq -r '.metadata.annotations."deployment.kubernetes.io/revision"'`)

        echo "Deployment '$deployment_name' current_revision=${current_revisions[$i]}"

        updateDeployment "$i" "$deployment_name" &
        deploy_pids+=($!)

        i=$((i+1))
        deployment_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_NAME"
    done

    i=0
    while [[ -n "${!deployment_label_envvar:-}" ]] ; do
        local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_NAMESPACE"
        local namespace="${!namespace_envvar}"

        local labelled_deployments=($(kubectl get deployments.apps -n $namespace -l "${!deployment_label_envvar}" -o json | jq -r '.items[] | .metadata.name'))

        # Add N namespace entries so lengths match
        for deployment_name in "${labelled_deployments[@]}"; do
            deployment_names+=($deployment_name)
            current_revisions+=(`kubectl get deployment/$deployment_name -n $namespace -o json | jq -r '.metadata.annotations."deployment.kubernetes.io/revision"'`)

            echo "Deployment '$deployment_name' current_revision=${current_revisions[$i]}"

            updateDeployment "$i" "$deployment_name" &
            deploy_pids+=($!)
        done

        i=$((i+1))
        deployment_label_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_LABEL"
    done

    # Update cronjobs, if any

    local j=0
    local cronjob_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${j}_NAME"

    while [[ -n "${!cronjob_name_envvar:-}" ]] ; do
        local cronjob_name="${!cronjob_name_envvar}"

        echo "Cronjob '$cronjob_name'"

        updateCronJob "$j" &
        cron_pids+=($!)

        j=$((j+1))
        cronjob_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${j}_NAME"
    done

    for i in ${!deploy_pids[@]}; do
        wait ${deploy_pids[$i]}

        if [ $? -ne 0 ]; then
            should_rollback=1
        fi
    done

    for i in ${!cron_pids[@]}; do
        wait ${cron_pids[$i]}

        if [ $? -ne 0 ]; then
            should_rollback=1
        fi
    done

    # Rollback and exit if any of the deploy updates has failed

    if [ $should_rollback -ne 0 ]; then
      # Rollback all deployments
        echo "--- :bk-status-failed: One or more deploys has failed to patch, rolling back deployment"

        for i in ${!deploy_pids[@]}; do
            rollbackDeployment "${i}" "${deployment_names[$i]}" "${current_revisions[$i]}" &
        done

        wait
        echo "--- :bk-status-passed: Rollback complete"
        exit 1
    fi

    # Wait for deployments to finish

    local rollout_pids=()

    for i in ${!deploy_pids[@]}; do
        waitForDeploymentRollout "${i}" "${deployment_names[$i]}" &
        rollout_pids+=($!)
    done

    for i in ${!rollout_pids[@]}; do
        wait ${rollout_pids[$i]}

        if [ $? -ne 0 ]; then
            should_rollback=1
        fi
    done

    # Rollback and exit

    if [ $should_rollback -ne 0 ]; then
        # Rollback all deployments
        echo "--- :bk-status-failed: One or more deploys has failed, rolling back deployment"

        for i in ${!exit_codes[@]}; do
            rollbackDeployment "${i}" "${deployment_names[$i]}" "${current_revisions[$i]}" &
        done

        wait
        echo "--- :bk-status-passed: Rollback complete"
        exit 1
    fi

    # Print commands to rollback the deploys as an FYI
    echo "--- ℹ️  Rollback information"
    echo "Use the below commands to rollback the deployments to thier previous revision."
    for i in ${!current_revisions[@]}; do
        local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${i}_NAMESPACE"

        local namespace="${!namespace_envvar:-default}"
        local deployment_name="${deployment_names[$i]}"
        local original_revision=${current_revisions[$i]}

        echo "# kubectl rollout undo deployment/$deployment_name -n $namespace --to-revision=$original_revision"
    done

    echo "--- :bk-status-passed: All deploys successful"

    exit 0
}

function waitForDeploymentRollout () {
    local deployment_index=$1
    local deployment_name="$2"
    local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_NAMESPACE"
    local namespace="${!namespace_envvar:-default}"

    local timeout="${BUILDKITE_PLUGIN_K8S_DEPLOY_TIMEOUT:-300}s"

    if ! kubectl rollout status deployment/$deployment_name -n $namespace --timeout=$timeout ; then
        echo "--- :bk-status-failed: Deploy failed for '${deployment_name}'"
        exit 1
    fi

    echo "--- :bk-status-passed: Deploy success for '${deployment_name}'"
    exit 0
}

function rollbackDeployment () {
    local deployment_index=$1
    local deployment_name=$2
    local original_revision=$3

    local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_NAMESPACE"

    local namespace="${!namespace_envvar:-default}"


    echo "--- ↩️  Rolling back '${deployment_name}' to revision $original_revision"

    kubectl rollout undo deployment/$deployment_name -n $namespace --to-revision=$original_revision

    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Failed to rollback '${deployment_name}'"
        exit 1
    else
        echo "--- ↩️  Rollback success for '${deployment_name}'"
    fi

    exit 0
}

function generatePatchFile () {
    local filename="$1"
    local object_type="$2"
    local index=$3

    echo "[]" > $filename

    # Extract each patch to be updated

    local i=0
    local patches_path_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_${object_type}_${index}_PATCHES_${i}_PATH"

    while [[ -n "${!patches_path_envvar:-}" ]] ; do
        local patches_op_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_${object_type}_${index}_PATCHES_${i}_OP"
        local patches_value_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_${object_type}_${index}_PATCHES_${i}_VALUE"

        local op="${!patches_op_envvar}"
        local path="${!patches_path_envvar}"
        local value="${!patches_value_envvar}"

        # Append to the patch json
        cat <<< $(jq -r --arg OP "$op" --arg PATH "$path" --arg VALUE "$value" \
            '. += [{"op":$OP, "path":$PATH, "value":$VALUE}]' < $filename) > $filename

        i=$((i+1))
        patches_path_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_${object_type}_${index}_PATCHES_${i}_PATH"
    done
}

function updateCronJob () {
    local cronjob_index=$1
    local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${cronjob_index}_NAMESPACE"
    local cronjob_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${cronjob_index}_NAME"

    local patch_json_filename="/tmp/${cronjob_index}_${BUILDKITE_COMMIT}_c.json"
    generatePatchFile "$patch_json_filename" "CRONJOBS" $cronjob_index

    # Extract each container to be updated
    i=0
    local container_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${cronjob_index}_CONTAINERS_${i}_CONTAINERNAME"
    local cronjob_name="${!cronjob_name_envvar}"

    while [[ -n "${!container_name_envvar:-}" ]] ; do
        local image_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${cronjob_index}_CONTAINERS_${i}_IMAGE"

        local container_name="${!container_name_envvar}"
        local image_name="${!image_name_envvar}"

        local container_index=$(kubectl get cronjob/$cronjob_name -n $namespace -o json | jq -r --arg CONTAINER_NAME "$container_name" '.spec.jobTemplate.spec.template.spec.containers | map(.name == $CONTAINER_NAME) | index(true)')

        # Ensure container_index is numeric and not null
        re='^[0-9]+$'
        if ! [[ $container_index =~ $re ]] ; then
            echo "--- :bk-status-failed: Container '${container_name}' not found in cronjob '${cronjob_name}'"

            rm $patch_json_filename
            exit 1
        fi

        # Record rollback information
        local current_image=$(kubectl get cronjob/$cronjob_name -n $namespace -o json | jq -r --argjson INDEX $container_index '.spec.jobTemplate.spec.template.spec.containers[$INDEX].image')
        echo "Can be rolled back with # kubectl set image cronjob/${cronjob_name} -n ${namespace} ${container_name}=\"${current_image}\" "

        # Append to the patch json
        cat <<< $(jq -r --arg PATH "/spec/jobTemplate/spec/template/spec/containers/$container_index/image" --arg IMAGE_NAME "$image_name" '. += [{"op":"replace", "path":$PATH, "value":$IMAGE_NAME}]' < $patch_json_filename) > $patch_json_filename

        i=$((i+1))
        container_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_CRONJOBS_${cronjob_index}_CONTAINERS_${i}_CONTAINERNAME"
    done

    echo "--- :kubernetes: Deploying new image to ${cronjob_name}"

    echo "Applying patch JSON"
    cat $patch_json_filename

    kubectl patch cronjob/$cronjob_name --namespace=$namespace --type="json" -p="$(cat ${patch_json_filename})"
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Failed to patch cronjob for '${cronjob_name}'"
        rm $patch_json_filename
        exit 1
    fi

    rm $patch_json_filename
    exit 0
}

function updateDeployment () {
    local deployment_index=$1
    local deployment_name="$2"
    local namespace_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_NAMESPACE"

    local namespace="${!namespace_envvar:-default}"
    # Create a json file for storing patches to the deployment

    local patch_json_filename="/tmp/${deployment_name}_${BUILDKITE_COMMIT}_d.json"
    generatePatchFile "$patch_json_filename" "DEPLOYMENTS" $deployment_index

    # Extract each container to be updated
    i=0
    local container_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_CONTAINERS_${i}_CONTAINERNAME"

    while [[ -n "${!container_name_envvar:-}" ]] ; do
        local image_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_CONTAINERS_${i}_IMAGE"

        local container_name="${!container_name_envvar}"
        local image_name="${!image_name_envvar}"

        local container_index=$(kubectl get deployment/$deployment_name -n $namespace -o json | jq -r --arg CONTAINER_NAME "$container_name" '.spec.template.spec.containers | map(.name == $CONTAINER_NAME) | index(true)')

        # Ensure container_index is numeric and not null
        re='^[0-9]+$'
        if ! [[ $container_index =~ $re ]] ; then
            echo "--- :bk-status-failed: Container '${container_name}' not found in deployment '${deployment_name}'"

            rm $patch_json_filename
            exit 1
        fi

        # Append to the patch json
        cat <<< $(jq -r --arg PATH "/spec/template/spec/containers/$container_index/image" --arg IMAGE_NAME "$image_name" '. += [{"op":"replace", "path":$PATH, "value":$IMAGE_NAME}]' < $patch_json_filename) > $patch_json_filename

        i=$((i+1))
        container_name_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DEPLOYMENTS_${deployment_index}_CONTAINERS_${i}_CONTAINERNAME"
    done

    # Build annotation

    local annotation="Buildkite deploy $(date +'%d-%m-%Y %H:%M')."

    if [[ ! -z "${BUILDKITE_UNBLOCKER}" ]]; then
        annotation="${annotation} unblocker='${BUILDKITE_UNBLOCKER}'"
    fi

    local git_commit_string=$(git log --oneline -n 1 2> /dev/null) || "$BUILDKITE_COMMIT $BUILDKITE_MESSAGE"
    if [[ ! -z "${BUILDKITE_MESSAGE}" ]]; then
        annotation="${annotation} commit='${git_commit_string}'"
    fi

    echo "--- :kubernetes: Deploying new image to ${deployment_name}"

    echo "Applying patch JSON"
    cat $patch_json_filename

    kubectl patch deployment/$deployment_name --namespace=$namespace --type="json" -p="$(cat ${patch_json_filename})"
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Failed to patch deployment for '${deployment_name}'"
        rm $patch_json_filename
        exit 1
    fi

    kubectl annotate deployment/$deployment_name kubernetes.io/change-cause="${annotation}" -n $namespace
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Failed to annotate deployment for '${deployment_name}'"
        rm $patch_json_filename
        exit 1
    fi

    rm $patch_json_filename
    exit 0
}

function promoteImage () {
    # Test if the image already exists on the kubernetes host
    local should_cleanup_source_image=1

    if docker inspect --type=image $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE ; then
        echo "Image tag already exists on host"
        should_cleanup_source_image=0
    fi

    # Pull the source image
    docker pull $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE
    if [ $? -ne 0 ]; then
        echo "--- :bk-status-failed: Promotion failed. Failed to pull source image"
        exit 1
    fi

    # Loop over destinations and push in parallel
    local i=0
    local destination_image_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
    local destination_repository_url_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"
    local destination_region_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REGION"

    local push_pids=()

    while [[ -n "${!destination_image_envvar:-}" ]] ; do
        # Tag and push the image
        docker tag $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE ${!destination_repository_url_envvar}/${!destination_image_envvar}

        # Start push in parallel
        docker push ${!destination_repository_url_envvar}/${!destination_image_envvar} &
        push_pids+=($!)

        i=$((i+1))
        destination_image_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
        destination_repository_url_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"
        destination_region_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REGION"
    done

    # Wait for each image push to complete
    local failure_count=0

    for i in ${!push_pids[@]}; do
        wait ${push_pids[$i]}

        local push_exit_code=$?

        # Cleanup the tag locally
        destination_image_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_IMAGE"
        destination_repository_url_envvar="BUILDKITE_PLUGIN_K8S_DEPLOY_DESTINATIONIMAGES_${i}_REPOSITORYURL"

        docker rmi ${!destination_repository_url_envvar}/${!destination_image_envvar}

        if [ "$push_exit_code" -ne "0" ]; then
            echo "--- :bk-status-failed: Promotion failed. Push failed to destination repository ${!destination_repository_url_envvar}"
            failure_count=$((failure_count+1))
        else
            echo "--- :bk-status-passed: Image promotion success - ${!destination_repository_url_envvar}/${!destination_image_envvar}"
        fi
    done

    # Clean up the source image if it didn't exist when we started
    if [ "$should_cleanup_source_image" -eq "1" ]; then
        docker image rm $BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_REPOSITORYURL/$BUILDKITE_PLUGIN_K8S_DEPLOY_SOURCEIMAGE_IMAGE
    fi

    # Fail this build step if there was any failures pushing an image
    if [ "$failure_count" -eq "0" ]; then
        exit 0
    else
        exit 1
    fi
}

function run_job () {
    local templates_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/templates"
    local safe_pipeline_name="$( echo "$BUILDKITE_PIPELINE_NAME" | tr '[:upper:]' '[:lower:]' | tr '_' '-' | tr ' ' '-')"
    local random_id="$( head -c 5 /dev/urandom | base32 | tr '[:upper:]' '[:lower:]' )"
    local service_account_name="$BUILDKITE_PLUGIN_K8S_DEPLOY_JOBSERVICEACCOUNTNAME"
    local namespace="${BUILDKITE_PLUGIN_K8S_DEPLOY_JOBNAMESPACE:-default}"

    JOB_NAME="buildkite-job-$safe_pipeline_name-$random_id"
    JOB_IMAGE="$BUILDKITE_PLUGIN_K8S_DEPLOY_JOBIMAGE"
    JOB_TIMEOUT_SECONDS="${BUILDKITE_PLUGIN_K8S_DEPLOY_TIMEOUT:-300}"

    local job_json_file="/tmp/$JOB_NAME.json"

    echo "--- :s3: Fetching job template from S3"

    if ! aws s3 cp $BUILDKITE_PLUGIN_K8S_DEPLOY_JOBTEMPLATEURL $job_json_file ; then
        echo "--- :bk-status-failed: Failed to download job template from S3"
        exit 1
    fi

    export JOB_NAME JOB_IMAGE
    cat <<< $(envsubst < $job_json_file) > $job_json_file

    # Run the job

    if ! kubectl apply -n $namespace -f $job_json_file ; then
      echo "--- :bk-status-failed: Job failed to launch"
      rm $job_json_file
      exit 1
    fi

    tail_job_logs "$job_json_file" "$namespace"

    local jobstatus=""
    while [[ -z "$jobstatus" ]] ; do
        jobstatus=$(kubectl get job -n $namespace "${JOB_NAME}" -o 'jsonpath={.status.conditions[].type}')
        sleep 1
    done

    local exit_code=0
    case "$jobstatus" in
        'Complete')
            echo "--- :bk-status-passed: Job completed successfully"
            kubectl delete -n $namespace job/$JOB_NAME
            ;;
        *)
            exit_code=1
            echo "--- :bk-status-failed: Job failed with status $jobstatus"
            ;;
    esac

    # Clean up
    rm $job_json_file

    exit $exit_code
}


function tail_job_logs {
    local namespace=$2

    # Get init container names from the job file if there are any

    if [[ $( cat $1 | jq -r ".spec.template.spec.initContainers" ) != "null" ]]; then
        local init_container_names=()
        for row in $(cat $1 | jq -r '.spec.template.spec.initContainers[] | @base64'); do
            _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
            }
            init_container_names+=($(_jq '.name'))
        done

        # Tail the logs of the init containers in order

        for container_name in "${init_container_names[@]}"; do
            echo "--- :k8s: Init container ${container_name}"

            while true ; do
                stdbuf -o0 -e0 kubectl logs -n $namespace -f "job/${JOB_NAME}" -c ${container_name} 2>>/dev/null

                if [ $? -eq 0 ]; then
                    break
                else
                    jobstatus=$(kubectl get job -n $namespace "${JOB_NAME}" -o 'jsonpath={.status.conditions[].type}')
                    if [[ "$jobstatus" == "Failed" ]]; then
                        echo "Job failed on init container ${container_name}"
                        return
                    fi
                fi
            done
        done
    fi

    # Tail the main container logs

    echo "--- :k8s: Main containers"

    while true ; do
        stdbuf -o0 -e0 kubectl logs -n $namespace -f "job/${JOB_NAME}" --all-containers=true 2>>/dev/null

        if [ $? -eq 0 ]; then
            break
        else
            jobstatus=$(kubectl get job -n $namespace "${JOB_NAME}" -o 'jsonpath={.status.conditions[].type}')
            if [[ "$jobstatus" == "Failed" ]]; then
                echo "Job failed"
                return
            fi
        fi
    done
}

function helm_deploy() {
  local chart="${BUILDKITE_PLUGIN_K8S_DEPLOY_CHART}"
  local chart_version="${BUILDKITE_PLUGIN_K8S_DEPLOY_CHART_VERSION}"
  local release="${BUILDKITE_PLUGIN_K8S_DEPLOY_RELEASE}"
  local tag="${BUILDKITE_PLUGIN_K8S_DEPLOY_TAG}"
  local namespace="${BUILDKITE_PLUGIN_K8S_DEPLOY_NAMESPACE:-default}"
  local values_file="$(mktemp)"
  local timeout="${BUILDKITE_PLUGIN_K8S_DEPLOY_TIMEOUT:-300}s"

  set -o pipefail

  echo "--- :helm: Update release (${release}) with tag(${tag}) using chart (${chart}) at version (${chart_version})"

  # Update the repo index - all repos
  helm repo update

  # Values file
  echo "${BUILDKITE_PLUGIN_K8S_DEPLOY_VALUES}" > "${values_file}"

  exit_code=0

  helm_status=$(helm status "${release}" -n "${namespace}")
  deploy_status=$(echo "${helm_status}" | grep STATUS |cut -c 9-)

  case "$deploy_status" in
      unknown|uninstalled|superseded|failed|uninstalling|pending-install|pending-upgrade|pending-rollback)
          echo "--- :bk-status-failed: ${release} is in the wrong status '${deploy_status}' - expected 'deployed'"
          exit_code=1
          ;;
      deployed|"")
          if [ "$deploy_status" == "" ]; then
              # Create a new release as requested
              echo ":confused: Release ${release} not found, creating"
          fi
          if ! helm upgrade --install --atomic -f "${values_file}" --set image.tag="${tag}" -n "${namespace}" --timeout "${timeout}" --debug "${release}" --version "${chart_version}" "${chart}";
          then
              echo "--- :bk-status-failed: Failed to update ${release} of ${chart} with version ${chart_version}"
              exit_code=1
          fi
          ;;
  esac

  rm -f "${values_file}"
  exit $exit_code
}

case "$BUILDKITE_PLUGIN_K8S_DEPLOY_ACTION" in
    'updateImage')
        updateImage
        ;;
    'promoteImage')
        promoteImage
        ;;
    'runJob')
        run_job
        ;;
    'helmDeploy')
        helm_deploy
        ;;
    *)
        echo "Invalid action: $BUILDKITE_PLUGIN_K8S_DEPLOY_ACTION"
        ;;
esac
